
servver.js:
const express= require('express')
const cors= require('cors')
const morgan =require('morgan')
const dotenv= require('dotenv')
const colors =require('colors')
const connectdb = require('./config/connectdb')
const jwt = require('jsonwebtoken');
const bodyParser = require('body-parser');
const Store = require('./storemodal');
//config dotenv file
dotenv.config();


//databse call
connectdb();

//rest object
const app= express()

//middleware
app.use(morgan(`dev`))
app.use(express.json())
app.use((cors()))



//

//routes
const port = 8080;

// Middleware to parse JSON bodies
app.use(bodyParser.json());

const secretKey = 'THISISBESTLEANINGPROJECTFORSHIVANIRAJENDRAVYAS'; 

// Sample data
const stores = [
    { id: 1, name: 'Store A', address: '123 Main St, City, Country', email: 'storea@example.com', phone: '123-456-7890' },
    { id: 2, name: 'Store B', address: '456 Elm St, Town, Country', email: 'storeb@example.com', phone: '987-654-3210' },
  
];

const validCategories = ["Stationary", "Clothing", "Electronics", "Grocery", "Furniture"];

// API to get current location
app.post('/api/current-location', (req, res) => {
    const { latitude, longitude } = req.body;
    if (latitude && longitude) {
        res.json({ latitude, longitude });
    } else {
        res.status(400).json({ error: 'Latitude and Longitude are required' });
    }
});

// API to enter location
app.get('/api/enter-location', (req, res) => {
    console.log(req.query);
    const { location } = req.query;
    
    if (location) {
        res.json({ message: `Location entered: ${location}` });
    } else {
        res.status(400).json({ error: 'Location is required' });
    }
});


// API to filter states
app.post('/api/filter-states', (req, res) => {
    const { states } = req.body;
    if (states && Array.isArray(states)) {
        res.json({ states });
        console.log(req.body);
    } else {
        res.status(400).json({ error: 'States array is required' });
    }
    
});

// API to filter stores by category
// app.post('/api/filter_category', (req, res) => {
//     const { stores } = req.body;
//     if (stores && Array.isArray(stores)) {
//         const filteredStores = stores.filter(store => validCategories.includes(store.category));
//         res.json({ filteredStores });
//     } else {
//         res.status(400).json({ error: 'Stores array is required' });
//     }
// });
// app.post('/api/filter_category', async (req, res) => {
//     const { category } = req.body;
//     try {
//         const filteredStores = await Store.find({ category }); // Filter stores by category
//         res.json(filteredStores);
//     } catch (err) {
//         res.status(500).send(err);
//     }
// });

app.post('/api/filter_category', async (req, res) => {
    const { category, page = 1, limit = 10 } = req.body;
    try {
        const limitNum = parseInt(limit, 10);
        const pageNum = parseInt(page, 10);

        const filteredStores = await Store.find({ category })
            .limit(limitNum)
            .skip((pageNum - 1) * limitNum)
            .sort({ createdAt: -1 });

        const count = await Store.countDocuments({ category });

        res.status(200).json({
            stores: filteredStores,
            totalPages: Math.ceil(count / limitNum),
            currentPage: pageNum,
        });
    } catch (err) {
        res.status(500).send(err);
    }
});



// API to get stores

const getStores = async (req, res, next) => {
    try {
       
        const { page = 1, limit = 10 } = req.query;

        const pageNumber = Number(page);
        const limitNumber = Number(limit);

       
        const skip = (pageNumber - 1) * limitNumber;

     
        const stores = await Store.find()
            .limit(limitNumber)
            .skip(skip)
            .sort({ createdAt: -1 });

        const totalStores = await Store.countDocuments();

        return res.status(200).json({
            stores,
            totalPages: Math.ceil(totalStores / limitNumber),
            currentPage: pageNumber,
        });
    } catch (err) {
        next(err);
    }
};

app.get('/api/stores', getStores);


// API to login using JWT
app.post('/api/login', (req, res) => {
    const { username, password } = req.body;
    if (username === 'shivani123' && password === '!213432') {
        const token = jwt.sign({ username }, secretKey, { expiresIn: '1h' });
        res.json({ token });
    } else {
        res.status(401).json({ error: 'Invalid username or password' });
    }
});

const token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InNoaXZhbmkxMjMiLCJpYXQiOjE3MTU4MzE5NjAsImV4cCI6MTcxNTgzNTU2MH0.2mAecMpAiwcJj4N9nxztlmSJ-zA4gHm6DVtoVlc8r0E';

jwt.verify(token, secretKey, (err, decoded) => {
    if (err) {
        console.error('Token verification failed:', err);
        return;
    }

    console.log('Decoded token:', decoded);
});


const corsOptions = {
    origin: 'http://localhost:5173',
    methods: 'GET, POST',
    allowedHeaders: 'Content-Type, Authorization',
};

// Use CORS middleware with options
app.use(cors(corsOptions));


// Start the server
app.listen(port, () => {
    console.log(`Server is running on http://localhost:${port}`);
});


card.vue<script setup>
import { ref, computed, onMounted, onBeforeUnmount, watch } from "vue";
import {
  HomeFilled,
  PhoneOutlined,
  ChromeOutlined,
  MailOutlined,
  FilterOutlined,
} from "@ant-design/icons-vue";
import { RouterView } from "vue-router";
import { useGeolocation } from "../userGeolocation";
import { Loader } from "@googlemaps/js-api-loader";
import VueGoogleAutocomplete from "vue-google-autocomplete";

import axios from "axios";
//import updateMarkersOnMap from "./updateMarkersOnMap.vue";
import api, {
  sendLocation,
  enterLocation,
  filterStates as filterStatesApi,
} from "../apiservice";
import { MarkerClusterer } from "@googlemaps/markerclusterer";

const props = defineProps({
  cards: Array,
});

const handleCallButtonClick = () => {
  window.open(`tel:${card.phone}`, "_self");
};

const handleEmailClick = () => {
  window.open(`mailto:${card.email}`, "_self");
};

//search functionality

const search = ref("");

// watch(search, () => {
//   card.value = card.filter((card) =>
//     card.name.toLowerCase().includes(search.value.toLowerCase())
//   );
// });
//apis
//1.lat,long:
const message = ref("");
let latitude = "";
let longitude = "";

const locationInput = ref("");

// const submitLocation = async () => {
//   try {
//     const response = await axios.post(
//       "http://localhost:8080/api/current-location",
//       {
//         latitude,
//         longitude,
//       }
//     );
//     console.log("Location entered successfully:", response.data.message);
//   } catch (error) {
//     console.error(
//       "Error entering location:",
//       error.response?.data?.error || error.message
//     );
//   }
// };
const submitLocation = async () => {
  try {
    if (!latitude || !longitude) {
      console.error("Latitude and Longitude are required");
      return;
    }
    const response = await sendLocation(latitude, longitude);
    console.log("Location entered successfully:", response.data.message);
  } catch (error) {
    console.error(
      "Error entering location:",
      error.response?.data?.error || error.message
    );
  }
};

const EnterLocation = async () => {
  try {
    const response = await axios.get(
      `/api/enter-location?location=${location}`
    );
    console.log("Location entered successfully:", response.data.message);
    console.log("locationInput:", locationInput, "Type:", typeof locationInput);
  } catch (error) {
    console.error(
      "Error entering location:",
      error.response?.data?.error || error.message
    );
  }
};
// const EnterLocation = async () => {
//   try {
//     const response = await enterLocation(locationInput.value);
//     console.log("Location entered successfully:", response.data.message);
//   } catch (error) {
//     console.error(
//       "Error entering location:",
//       error.response?.data?.error || error.message
//     );
//   }
// };

const states = ref([
  { id: 1, name: "Maharashtra" },
  { id: 2, name: "Telangana" },
  { id: 3, name: "Punjab" },
  { id: 4, name: "Gujarat" },
  { id: 5, name: "Madhya Pradesh" },
  { id: 6, name: "Uttar Pradesh" },
]);

const filterStates = async (selectedState) => {
  try {
    console.log("Selected state:", selectedState);
    const response = await axios.post(
      "http://localhost:8080/api/filter-states",
      { states: [selectedState.name] }
    );
    console.log("Filtered states response:", response.data);
  } catch (error) {
    console.error(
      "Error filtering states:",
      error.response?.data?.error || error.message
    );
  }
};

const handleStateSelection = (e) => {
  const selectedState = states.value.find((state) => state.id === e);
  if (selectedState) {
    console.log("Handle state selection:", selectedState);
    filterStates(selectedState);
  }
};

// const filterStoresByCategory = (stores) => {
//   return axios.post("http://localhost:8080/api/filter_category", { stores });
// };
//api for filtercategory
const category = ref([
  { id: 1, name: "Stationary" },
  { id: 2, name: "Clothing" },
  { id: 3, name: "Electronics" },
  { id: 4, name: "Grocery" },
  { id: 5, name: "Furniture" },
]);

const filterStoresByCategory = async (selectedStore) => {
  try {
    console.log("Selected store:", selectedStore);
    const response = await axios.post(
      "http://localhost:8080/api/filter_category",
      { stores: [{ category: selectedStore.name }] }
    );
    console.log("Filtered stores response:", response.data);
  } catch (error) {
    console.error(
      "Error filtering stores:",
      error.response?.data?.error || error.message
    );
  }
};

const handleStoreSelection = (e) => {
  const selectedStore = category.value.find((store) => store.id === e);
  if (selectedStore) {
    console.log("Handle store selection:", selectedStore);
    filterStoresByCategory(selectedStore);
  }
};

// const cardData = ref([]);
// const currentPage = ref(1);
// const totalPages = ref(0);
// const limit = 10; // Set limit to 10 cards per page

// const fetchStores = async (page = 1) => {
//   try {
//     const response = await axios.get(
//       `http://localhost:8080/api/stores?page=${page}&limit=${limit}`
//     );
//     cardData.value = response.data.stores;
//     totalPages.value = response.data.totalPages;
//     currentPage.value = response.data.currentPage;
//   } catch (error) {
//     console.error("Error fetching stores:", error.message);
//   }
// };

// // Call fetchStores when the component is mounted
// onMounted(() => fetchStores(currentPage.value));

// // Function to handle pagination
// const goToPage = (page) => {
//   if (page > 0 && page <= totalPages.value) {
//     fetchStores(page);
//   }
// };
const cardData = ref([]);
const currentPage = ref(1);
const totalPages = ref(0);
const limit = 10;
const fetchStores = async (page = 1) => {
  try {
    const response = await axios.get(
      `http://localhost:8080/api/stores?page=${page}&limit=${limit}`
    );
    cardData.value = response.data.stores;
    totalPages.value = response.data.totalPages;
    currentPage.value = response.data.currentPage;

    updateMarkersOnMap();
  } catch (error) {
    console.error("Error fetching stores:", error.message);
  }
};

// Call fetchStores when the component is mounted
onMounted(() => fetchStores(currentPage.value));

// Function to handle pagination
const goToPage = async (page) => {
  if (page > 0 && page <= totalPages.value) {
    await fetchStoreData(page);
    updateMarkersOnMap();
  }
};

const GOOGLE_MAPS_API_KEY = "AIzaSyDBBipgwyczwFN2wAv5Q04WMifIwL80DYw";

const { coords } = useGeolocation();
const currPos = computed(() => ({
  lat: coords.value.latitude,
  lng: coords.value.longitude,
}));

const otherPos = ref(null);

const storeInfo = ref([]);
const mapDiv = ref(null);
const map = ref(null);
let markerCluster = null;

const loader = new Loader({
  apiKey: GOOGLE_MAPS_API_KEY,
  libraries: ["places"],
  version: "weekly",
});

const fetchStoreData = async (page = 1) => {
  try {
    console.log("Fetching store data...", page);
    const response = await axios.get(
      `http://localhost:8080/api/stores?page=${page}&limit=${limit}`
    );

    console.log("Store data fetched:", response.data);

    if (response.data && Array.isArray(response.data.stores)) {
      storeInfo.value = response.data.stores;
      totalPages.value = response.data.totalPages;
      currentPage.value = response.data.currentPage;

      updateMarkersOnMap();
    } else {
      console.error("Fetched data is not an array:", response.data);
      storeInfo.value = [];
    }

    // storeInfo.value = response.data;
    // updateMarkersOnMap();
  } catch (error) {
    console.error("Error fetching store data:", error.message);
  }
};

onMounted(async () => {
  console.log("Component mounted, loading Google Maps...");

  await loader.load();
  console.log("Google Maps loaded");

  map.value = new google.maps.Map(mapDiv.value, {
    center: { lat: 20, lng: 80 }, // Default center if no stores are available
    zoom: 7,
  });
  console.log("Google Map initialized");

  fetchStoreData();
});

const updateMarkersOnMap = () => {
  if (!map || !storeInfo.value.length === 0) {
    console.log("Map not initialized or no store data available");

    return;
  }

  if (markerCluster) {
    console.log("Clearing existing markers...");

    markerCluster.clearMarkers();
  }
  // console.log("Updating markers on map...");

  console.log("Creating new markers...");

  const markers = storeInfo.value.map((card) => {
    // console.log(
    //   `Store: ${card.name}, Latitude: ${card.latitude}, Longitude: ${card.longitude}`
    // );

    const marker = new google.maps.Marker({
      position: { lat: card.latitude, lng: card.longitude },
      map: map.value,
      title: card.name,
    });

    const infoWindow = new google.maps.InfoWindow({
      content: `<h3>${card.name}</h3><p>${card.address}</p> <p>${card.email}</p>`,
    });

    marker.addListener("click", () => {
      infoWindow.open(map.value, marker);
    });

    return marker;
  });

  markerCluster = new MarkerClusterer({
    map: map.value,
    markers,
    imagePath:
      "https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m",
  });
  console.log("Markers updated and clustered");
};

const nextPage = async () => {
  if (currentPage.value < totalPages.value) {
    await fetchStoreData(currentPage.value + 1);
    updateMarkersOnMap();
  }
};

const prevPage = async () => {
  if (currentPage.value > 1) {
    await fetchStoreData(currentPage.value - 1);
    updateMarkersOnMap();
  }
};

onBeforeUnmount(() => {
  console.log("Component is about to unmount, clearing markers...");

  if (markerCluster) {
    markerCluster.clearMarkers();
  }
});
</script>

<template>
  <div class="container">
    <!-- Left Section -->
    <div class="left-section">
      <div class="header-container">
        <a-card
          style="width: 300px; display: flex; justify-content: space-between"
        >
          <!-- <VueGoogleAutocomplete
            ref="autoCompleteRef"
            id="map"
            classname="form-control"
            placeholder="Enter a location"
            v-model="locationInput"
            :api-key="AIzaSyDBBipgwyczwFN2wAv5Q04WMifIwL80DYw"
            @placechanged="placeSelected"
          />
          <button @click="EnterLocation">Submit</button>
          <p>{{ message }}</p> -->

          <!-- Input for entering location -->
          <input
            type="text"
            v-model.trim="search"
            placeholder="Enter Desired location"
            @input="filterCards"
          />
          <button @click="EnterLocation">Submit</button>
          <p>{{ message }}</p>

          <!-- Inputs for latitude and longitude -->
          <p>Your current location:</p>
          <div>
            <label for="latitude">Latitude:</label>
            <input
              type="text"
              id="latitude"
              v-model="latitude"
              placeholder="Enter latitude"
            />

            <label for="longitude">Longitude:</label>
            <input
              type="text"
              id="longitude"
              v-model="longitude"
              placeholder="Enter longitude"
            />

            <button @click="submitLocation">Submit Location</button>
          </div>
          <br />

          <!-- Dropdown for filtering stores -->
          <div class="dropdown-left">
            <a-dropdown>
              <a class="ant-dropdown-link" @click.prevent>Filter Stores by</a>
              <template #overlay>
                <a-menu>
                  <a-menu-item
                    @click="handleStoreSelection(store.id)"
                    v-for="store in category"
                    :key="store.id"
                  >
                    <a href="javascript:;">{{ store.name }}</a>
                  </a-menu-item>
                </a-menu>
              </template>
            </a-dropdown>
          </div>

          <!-- Dropdown for selecting a state -->
          <div class="dropdown-right">
            <a-dropdown>
              <a class="ant-dropdown-link" @click.prevent>State</a>
              <template #overlay>
                <a-menu>
                  <a-menu-item
                    @click="handleStateSelection(state.id)"
                    v-for="state in states"
                    :key="state.id"
                  >
                    <a href="javascript:;">{{ state.name }}</a>
                  </a-menu-item>
                </a-menu>
              </template>
            </a-dropdown>
          </div>
        </a-card>
      </div>

      <!-- Example cards for stores -->

      <div class="container">
        <!-- Render store cards dynamically -->
      </div>

      <!-- old code -->

      <div v-for="card in cardData" :key="card.id" class="card">
        <a-card style="width: 300px">
          <h2>{{ card.name }}</h2>
          <p>{{ card.email }}</p>
          <p>{{ card.phone }}</p>
          <!-- <p>{{ card.latitude }}</p>
          <p>{{ card.longitude }}</p> -->

          <a-dropdown>
            <a class="ant-dropdown-link" @click.prevent>Stores Opens at:</a>
            <template #overlay>
              <a-menu>
                <a-menu-item>
                  <a href="javascript:;">Monday: 9am-10pm</a>
                </a-menu-item>
                <a-menu-item>
                  <a href="javascript:;">Tuesday: 9am-10pm</a>
                </a-menu-item>
                <a-menu-item>
                  <a href="javascript:;">Wednesday: 9am-8pm</a>
                </a-menu-item>
                <a-menu-item>
                  <a href="javascript:;">Thursday: 11am-7pm</a>
                </a-menu-item>
                <a-menu-item>
                  <a href="javascript:;">Friday: 11am-7pm</a>
                </a-menu-item>
                <a-menu-item>
                  <a href="javascript:;">Saturday: 11am-7pm</a>
                </a-menu-item>
              </a-menu>
            </template>
          </a-dropdown>

          <p>Address:{{ card.address }}</p>
          <p>contact.no:{{ card.mobile }}</p>
          <div class="buttons">
            <a-button
              type="primary"
              class="black-button"
              style="width: 48%; margin-right: 4%"
              >Directions</a-button
            >
            <a-button type="primary" class="black-button" style="width: 48%"
              >Store Info</a-button
            >
          </div>
          <br />
        </a-card>
      </div>
      <div>
        <a-button
          @click="goToPage(currentPage - 1)"
          :disabled="currentPage <= 1"
        >
          Previous
        </a-button>
        <span>Page {{ currentPage }} of {{ totalPages }}</span>
        <a-button
          @click="goToPage(currentPage + 1)"
          :disabled="currentPage >= totalPages"
        >
          Next
        </a-button>
        <!-- <button
          @click="nextPage"
          :disabled="currentPage.value === totalPages.value"
        >
          Next
        </button> -->
      </div>
    </div>
    <!-- </div> -->

    <!-- Right Section (Map Image) -->
    <div class="right-section">
      <!-- <h4>Your Position</h4>
      Latitude: {{ currPos.lat.toFixed(2) }}, Longitude:
      {{ currPos.lng.toFixed(2) }}

      <div class="m-auto">
        <h4>Clicked position</h4>
        <span v-if="otherPos">
          Latitude: {{ otherPos.lat.toFixed(2) }}, Longitude:
          {{ otherPos.lng.toFixed(2) }}
        </span>
        <span v-else>Click map to select a position</span>
      </div> -->

      <div ref="mapDiv" style="width: 100%; height: 80vh" />
    </div>
  </div>
</template>

<style scoped>
.container {
  display: flex;
  background-color: #d3d3d3;
}

.left-section {
  flex: 1;
  padding-right: 10px;
  padding-left: 30px;
  height: calc(100vh - 150px);
  width: 90%;
  overflow-y: auto;
  top: 0;
}
.card-container .ant-card {
  border-radius: 0; /* Remove border-radius */
}

.right-section {
  /* Maximize right section size */
  padding-left: 30px;
  display: flex;
  flex-direction: column; /* Align items vertically */
  width: 75%;
  margin-top: -10px;
  align-items: flex-start; /* Align items to the top */
}
.icon-large {
  font-size: 24px; /* Adjust the size as needed */
  float: right; /* Align the icon to the right */
  margin-top: -28px; /* Optional: Adjust top margin for spacing */
}
.search {
  align-items: start;
  align-content: flex-start;
}
.map-image {
  width: 97%;
  align-items: center;
  margin-top: 20px;
  /* Adjust image width as needed */
}
.black-button {
  background-color: #000; /* Black background color */
  color: #fff; /* White text color */
  border-radius: 0; /* No border radius (sharp corners) */
  border: none; /* No border */
}

/* Hover style (optional) */
.black-button:hover {
  background-color: #333; /* Darker shade of black on hover */
}
.header-container {
  display: flex;
  justify-content: space-between;
}

.left-header {
  margin-right: 160px; /* Pushes the left header to the left */
}

.right-header {
  margin-top: -25px;
  margin-left: 100px; /* Pushes the right header to the right */
}
.dropdown-left {
  margin-right: -45px;
}
.dropdown-right {
  margin-top: -25px;
  margin-right: 230px;
}

@media (min-width: 768px) {
  .card {
    width: calc(50% - 20px); /* Two cards per row with some margin */
  }
}
</style>
